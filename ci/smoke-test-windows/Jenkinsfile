pipeline {
    parameters {
        string(description: 'Version of the box file to run tests on', name: 'box_version')
        string(description: 'URL of the box file to run tests on', name: 'box_url')
    }
    agent {
        label 'windows'
    }
    stages {
        stage('start-vm') {
            steps {
                powershell """
                    cd ${env.WORKSPACE}
                    If (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator"))
                    {
                        echo "* Respawning PowerShell child process with elevated privileges"
                        \$pinfo = New-Object System.Diagnostics.ProcessStartInfo
                        \$pinfo.FileName = "powershell"
                        \$pinfo.Arguments = "& '" + \$myinvocation.mycommand.definition + "'"
                        \$pinfo.Verb = "RunAs"
                        \$pinfo.RedirectStandardError = \$false
                        \$pinfo.RedirectStandardOutput = \$false
                        \$pinfo.UseShellExecute = \$true
                        \$p = New-Object System.Diagnostics.Process
                        \$p.StartInfo = \$pinfo
                        \$p.Start() | Out-Null
                        \$p.WaitForExit()
                        echo "* Child process finished"
                        type "C:/jenkins/transcript-${env.JOB_NAME}-${env.BUILD_NUMBER}.txt"
                        Remove-Item "C:/jenkins/transcript-${env.JOB_NAME}-${env.BUILD_NUMBER}.txt"
                        Exit \$p.ExitCode
                    } Else {
                        echo "Child process starting with admin privileges"
                        Start-Transcript -Path "C:/jenkins/transcript-${env.JOB_NAME}-${env.BUILD_NUMBER}.txt"
                    }

                    mkdir dummy | Out-Null
                    Cmd /C "rmdir /S /Q project"
                    Remove-Item -Recurse -Force Vagrantfile,.vm,.vagrant,dummy
                    if( (Test-Path -Path project ) ) {
                      echo 'WARNING: project directory still exists, unable to delete it. Renaming it.'
                      mv project project.old.${env.BUILD_NUMBER}
                    }

                    vagrant init spryker-devvm-${params.box_version} ${params.box_url}
                    If (-Not (\$LastExitCode -eq 0)) { Exit 1 }
                    \$env:VM_NAME = "jenkins-${env.JOB_NAME}-${env.BUILD_NUMBER}"
                    . c:/jenkins/smb_credentials.ps1
                    vagrant up
                    If (-Not (\$LastExitCode -eq 0)) {
                      vagrant destroy --force
                      vagrant box remove spryker-devvm-${params.box_version}
                      Cmd /C "rmdir /S /Q project"
                      Exit 1
                    }
                """
            }
        }

        stage('composer') {
            steps {
                powershell """
                    cd ${env.WORKSPACE}
                    If (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator"))
                    {
                        echo "* Respawning PowerShell child process with elevated privileges"
                        \$pinfo = New-Object System.Diagnostics.ProcessStartInfo
                        \$pinfo.FileName = "powershell"
                        \$pinfo.Arguments = "& '" + \$myinvocation.mycommand.definition + "'"
                        \$pinfo.Verb = "RunAs"
                        \$pinfo.RedirectStandardError = \$false
                        \$pinfo.RedirectStandardOutput = \$false
                        \$pinfo.UseShellExecute = \$true
                        \$p = New-Object System.Diagnostics.Process
                        \$p.StartInfo = \$pinfo
                        \$p.Start() | Out-Null
                        \$p.WaitForExit()
                        echo "* Child process finished"
                        type "C:/jenkins/transcript-${env.JOB_NAME}-${env.BUILD_NUMBER}.txt"
                        Remove-Item "C:/jenkins/transcript-${env.JOB_NAME}-${env.BUILD_NUMBER}.txt"
                        Exit \$p.ExitCode
                    } Else {
                        echo "Child process starting with admin privileges"
                        Start-Transcript -Path "C:/jenkins/transcript-${env.JOB_NAME}-${env.BUILD_NUMBER}.txt"
                    }


                    vagrant ssh -c 'cd /data/shop/development/current; composer install'
                    If (-Not (\$LastExitCode -eq 0)) {
                        vagrant destroy --force
                        vagrant box remove spryker-devvm-${params.box_version}
                        Cmd /C "rmdir /S /Q project"
                        Exit 1
                    }
                """
            }
        }

        stage('install') {
            steps {
                powershell """
                    cd ${env.WORKSPACE}
                    If (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator"))
                    {
                        echo "* Respawning PowerShell child process with elevated privileges"
                        \$pinfo = New-Object System.Diagnostics.ProcessStartInfo
                        \$pinfo.FileName = "powershell"
                        \$pinfo.Arguments = "& '" + \$myinvocation.mycommand.definition + "'"
                        \$pinfo.Verb = "RunAs"
                        \$pinfo.RedirectStandardError = \$false
                        \$pinfo.RedirectStandardOutput = \$false
                        \$pinfo.UseShellExecute = \$true
                        \$p = New-Object System.Diagnostics.Process
                        \$p.StartInfo = \$pinfo
                        \$p.Start() | Out-Null
                        \$p.WaitForExit()
                        echo "* Child process finished"
                        type "C:/jenkins/transcript-${env.JOB_NAME}-${env.BUILD_NUMBER}.txt"
                        Remove-Item "C:/jenkins/transcript-${env.JOB_NAME}-${env.BUILD_NUMBER}.txt"
                        Exit \$p.ExitCode
                    } Else {
                        echo "Child process starting with admin privileges"
                        Start-Transcript -Path "C:/jenkins/transcript-${env.JOB_NAME}-${env.BUILD_NUMBER}.txt"
                    }


                    vagrant ssh -c 'cd /data/shop/development/current; ulimit -n 65535; vendor/bin/install --exclude=jenkins-up'
                    If (-Not (\$LastExitCode -eq 0)) {
                        vagrant destroy --force
                        vagrant box remove spryker-devvm-${params.box_version}
                        Cmd /C "rmdir /S /Q project"
                        Exit 1
                    }
                """
            }
        }

        stage('test') {
            steps {
                powershell """
                    cd ${env.WORKSPACE}
                    If (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator"))
                    {
                        echo "* Respawning PowerShell child process with elevated privileges"
                        \$pinfo = New-Object System.Diagnostics.ProcessStartInfo
                        \$pinfo.FileName = "powershell"
                        \$pinfo.Arguments = "& '" + \$myinvocation.mycommand.definition + "'"
                        \$pinfo.Verb = "RunAs"
                        \$pinfo.RedirectStandardError = \$false
                        \$pinfo.RedirectStandardOutput = \$false
                        \$pinfo.UseShellExecute = \$true
                        \$p = New-Object System.Diagnostics.Process
                        \$p.StartInfo = \$pinfo
                        \$p.Start() | Out-Null
                        \$p.WaitForExit()
                        echo "* Child process finished"
                        type "C:/jenkins/transcript-${env.JOB_NAME}-${env.BUILD_NUMBER}.txt"
                        Remove-Item "C:/jenkins/transcript-${env.JOB_NAME}-${env.BUILD_NUMBER}.txt"
                        Exit \$p.ExitCode
                    } Else {
                        echo "Child process starting with admin privileges"
                        Start-Transcript -Path "C:/jenkins/transcript-${env.JOB_NAME}-${env.BUILD_NUMBER}.txt"
                    }


                    \$Success = \$TRUE

                    echo "Checking Yves response - http://www.de.suite.local/ - 2 retries..."
                    \$WebResponse = Invoke-WebRequest http://www.de.suite.local/
                    \$WebResponse = Invoke-WebRequest http://www.de.suite.local/

                    \$Result = \$WebResponse.RawContent | Select-String -Pattern 'Spryker Shop' -Quiet
                    if (\$Result) {
                        echo "SUCCESS"
                    } else {
                        echo "FAILED"
                        \$Success = \$FALSE
                    }

                    echo "Checking Zed response - http://zed.de.suite.local/ - 2 retries..."
                    \$WebResponse = Invoke-WebRequest http://zed.de.suite.local/
                    \$WebResponse = Invoke-WebRequest http://zed.de.suite.local/
                    \$Result = \$WebResponse.RawContent | Select-String -Pattern 'Location: /auth/login' -Quiet
                    if (\$Result) {
                        echo "SUCCESS"
                    } else {
                        echo "FAILED"
                        \$Success = \$FALSE
                    }

                    if (-Not (\$Success)) {
                        vagrant destroy --force
                        vagrant box remove spryker-devvm-${params.box_version}
                        Cmd /C "rmdir /S /Q project"
                        Exit 1
                    }
                """
            }
        }

        stage('cleanup') {
            steps {
                powershell """
                    cd ${env.WORKSPACE}
                    If (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator"))
                    {
                        echo "* Respawning PowerShell child process with elevated privileges"
                        \$pinfo = New-Object System.Diagnostics.ProcessStartInfo
                        \$pinfo.FileName = "powershell"
                        \$pinfo.Arguments = "& '" + \$myinvocation.mycommand.definition + "'"
                        \$pinfo.Verb = "RunAs"
                        \$pinfo.RedirectStandardError = \$false
                        \$pinfo.RedirectStandardOutput = \$false
                        \$pinfo.UseShellExecute = \$true
                        \$p = New-Object System.Diagnostics.Process
                        \$p.StartInfo = \$pinfo
                        \$p.Start() | Out-Null
                        \$p.WaitForExit()
                        echo "* Child process finished"
                        type "C:/jenkins/transcript-${env.JOB_NAME}-${env.BUILD_NUMBER}.txt"
                        Remove-Item "C:/jenkins/transcript-${env.JOB_NAME}-${env.BUILD_NUMBER}.txt"
                        Exit \$p.ExitCode
                    } Else {
                        echo "Child process starting with admin privileges"
                        Start-Transcript -Path "C:/jenkins/transcript-${env.JOB_NAME}-${env.BUILD_NUMBER}.txt"
                    }


                    vagrant destroy --force
                    vagrant box remove spryker-devvm-${params.box_version}
                    Cmd /C "rmdir /S /Q project"
                    Remove-Item -Recurse -Force Vagrantfile,.vm,.vagrant
                """
            }
        }
    }
}
